{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a5620631_301de1a5",
        "filename": "src/5gnrsch/sch_utils.c",
        "patchSetId": 2
      },
      "lineNbr": 2121,
      "author": {
        "id": 1001425
      },
      "writtenOn": "2024-03-28T05:50:47Z",
      "side": 1,
      "message": "reason for checking y before allocation?",
      "range": {
        "startLine": 2121,
        "startChar": 16,
        "endLine": 2121,
        "endChar": 25
      },
      "revId": "8264f7ce2ba9f4a1874c4ec1018127cc27fa12cb",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0ef0c80_68fd1ade",
        "filename": "src/5gnrsch/sch_utils.c",
        "patchSetId": 2
      },
      "lineNbr": 2121,
      "author": {
        "id": 1000472
      },
      "writtenOn": "2024-03-28T10:12:49Z",
      "side": 1,
      "message": "this function is getting triggered twice.\nduring recfg we are trying allocate the memory even thought the pointer is already present in the data base. So that\u0027s why i have added the check here.",
      "parentUuid": "a5620631_301de1a5",
      "range": {
        "startLine": 2121,
        "startChar": 16,
        "endLine": 2121,
        "endChar": 25
      },
      "revId": "8264f7ce2ba9f4a1874c4ec1018127cc27fa12cb",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b7c6046_a4f9fdd5",
        "filename": "src/du_app/du_cfg.c",
        "patchSetId": 2
      },
      "lineNbr": 5360,
      "author": {
        "id": 1001425
      },
      "writtenOn": "2024-03-28T05:50:47Z",
      "side": 1,
      "message": "Dont we need to put it when DU is shutting down or when we are not reading from XML?",
      "range": {
        "startLine": 5360,
        "startChar": 6,
        "endLine": 5360,
        "endChar": 21
      },
      "revId": "8264f7ce2ba9f4a1874c4ec1018127cc27fa12cb",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ceeacf2e_34a306f0",
        "filename": "src/du_app/du_cfg.c",
        "patchSetId": 2
      },
      "lineNbr": 5360,
      "author": {
        "id": 1001425
      },
      "writtenOn": "2024-03-28T05:50:47Z",
      "side": 1,
      "message": "since this must be a corner scenario how it resolved the memory leak issue shown in memtool?",
      "range": {
        "startLine": 5360,
        "startChar": 6,
        "endLine": 5360,
        "endChar": 21
      },
      "revId": "8264f7ce2ba9f4a1874c4ec1018127cc27fa12cb",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3db09ac7_84bc0253",
        "filename": "src/du_app/du_cfg.c",
        "patchSetId": 2
      },
      "lineNbr": 5360,
      "author": {
        "id": 1000472
      },
      "writtenOn": "2024-03-28T10:12:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ceeacf2e_34a306f0",
      "range": {
        "startLine": 5360,
        "startChar": 6,
        "endLine": 5360,
        "endChar": 21
      },
      "revId": "8264f7ce2ba9f4a1874c4ec1018127cc27fa12cb",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8baf072f_22c13fd2",
        "filename": "src/du_app/du_cfg.c",
        "patchSetId": 2
      },
      "lineNbr": 5360,
      "author": {
        "id": 1000472
      },
      "writtenOn": "2024-03-28T10:12:49Z",
      "side": 1,
      "message": "when we shut down the du we don\u0027t to free the configuration information. becuase when we again bring up the du back we use the same configuration.",
      "parentUuid": "6b7c6046_a4f9fdd5",
      "range": {
        "startLine": 5360,
        "startChar": 6,
        "endLine": 5360,
        "endChar": 21
      },
      "revId": "8264f7ce2ba9f4a1874c4ec1018127cc27fa12cb",
      "serverId": "84e4e190-e623-4c37-9eda-58b1937c1b53"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "A maximum vote is required for the \u0027Code-Review\u0027 label. \t\t\tA minumum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8264f7ce2ba9f4a1874c4ec1018127cc27fa12cb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "A maximum \u0027Verified\u0027 vote from \u0027ORAN Required GHA\u0027 and one other CI or committer that is required for the \u0027Verified\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX,user\u003doran.required.gha AND label:Verified\u003dMAX,count\u003e\u003d2 AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX,user=oran.required.gha AND label:Verified=MAX,count>=2 AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX,user=oran.required.gha","label:Verified=MAX,count>=2"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8264f7ce2ba9f4a1874c4ec1018127cc27fa12cb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}